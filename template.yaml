AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Core resources, components, and configuration for Ready, Set, Cloud!

Parameters:
  GitHubOwner:
    Type: String
    Default: readysetcloud
  GitHubRepo:
    Type: String
    Default: ready-set-cloud
  UpdateGitHubSourceCode:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  AdminEmail:
    Type: String
    Default: allenheltondev@gmail.com
  BucketName:
    Type: String
  AmplifyAppId:
    Type: String
  DefaultCacheName:
    Type: String
  SendgridApiKey:
    Type: String
    NoEcho: true
  GitHubPAT:
    Type: String
    NoEcho: true
  OpenAIApiKey:
    Type: String
    NoEcho: true
  MomentoApiKey:
    Type: String
    NoEcho: true
  RootDomainName:
    Type: String
    Default: ''
  HostedZoneId:
    Type: String
    Default: ''

Metadata:
  esbuild-properties: &esbuild-properties
    Format: esm
    Minify: true
    OutExtension:
      - .js=.mjs
    Target: es2020
    Sourcemap: false
    EntryPoints:
      - index.mjs
    Banner:
      - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
    External:
      - '@aws-sdk/*'

Conditions:
  DeployCustomDomainSupport:
    !Not [!Equals [!Ref RootDomainName, '']]

Globals:
  Function:
    Runtime: nodejs20.x
    CodeUri: functions
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 3
    MemorySize: 1280
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  RSCCoreTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  TableStreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - ddb-stream-handler.mjs
    Properties:
      Handler: ddb-stream-handler.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !Sub ${RSCCoreTable.Arn}/stream/*

  TableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt RSCCoreTable.StreamArn
      FunctionName: !GetAtt TableStreamFunction.Arn
      StartingPosition: TRIM_HORIZON
      MaximumBatchingWindowInSeconds: 60
      BatchSize: 20
      FilterCriteria:
        Filters:
          - Pattern: '{ "dynamodb" : { "Keys" : { "sk" : { "S" : [ "tenant" ] } } } }'

  AddTenantPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - add-tenant-post-confirmation.mjs
    Properties:
      Handler: add-tenant-post-confirmation.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt RSCCoreTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref RSCCoreTable

  UpdateTenantFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - update-tenant.mjs
    Properties:
      Handler: update-tenant.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !GetAtt RSCCoreTable.Arn
            - Effect: Allow
              Action: ssm:PutParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/rsc/*
      Environment:
        Variables:
          TABLE_NAME: !Ref RSCCoreTable


  TriggerAmplifyBuildFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - trigger-amplify-build.mjs
    Properties:
      Handler: trigger-amplify-build.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: amplify:StartJob
              Resource: !Sub arn:${AWS::Partition}:amplify:${AWS::Region}:${AWS::AccountId}:apps/${AmplifyAppId}/branches/master/jobs/*
      Environment:
        Variables:
          APP_ID: !Ref AmplifyAppId
      Events:
        Build:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Trigger Site Rebuild

  NotifyOfBuildFailureFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - notify-of-build-failure.mjs
    Properties:
      Handler: notify-of-build-failure.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: amplify:ListJobs
              Resource: !Sub arn:${AWS::Partition}:amplify:${AWS::Region}:${AWS::AccountId}:apps/${AmplifyAppId}/branches/master/jobs/*
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secrets
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Environment:
        Variables:
          APP_ID: !Ref AmplifyAppId
          OWNER: !Ref GitHubOwner
          REPO: !Ref GitHubRepo
          SECRET_ID: !Ref Secrets
      Events:
        AmplifyBuildFailed:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.amplify
              detail-type:
                - Amplify Deployment Status Change
              detail:
                appId:
                  - !Ref AmplifyAppId
                jobStatus:
                  - FAILED

  AskOpenAIFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - ask-openai.mjs
    Properties:
      Handler: ask-openai.handler
      Timeout: 180
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secrets
      Environment:
        Variables:
          SECRET_ID: !Ref Secrets
          CACHE_NAME: !Ref DefaultCacheName
          CACHE_TTL: 3600

  AskOpenAIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/ask-openai
      Type: String
      Value: !GetAtt AskOpenAIFunction.Arn
      Description: Arn for the Ask ChatGPT Lambda function

  SendApiRequestFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - send-api-request.mjs
    Properties:
      Handler: send-api-request.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref Secrets
      Environment:
        Variables:
          SECRET_ID: !Ref Secrets

  SendApiRequestParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/send-api-request
      Type: String
      Value: !GetAtt SendApiRequestFunction.Arn
      Description: Arn for the Send API Request Lambda function

  SendEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - send-email.mjs
    Properties:
      Handler: send-email.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref Secrets
      Environment:
        Variables:
          SECRET_ID: !Ref Secrets
          FROM_EMAIL: !Ref AdminEmail
      Events:
        SendMailEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Send Email

  Secrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString:
        Fn::Sub:
          - |-
            {
              "momento": "${MomentoApiKey}",
              "github": "${GitHubPAT}",
              "sendgrid":"${SendgridApiKey}",
              "openai": "${OpenAIApiKey}"
            }
          - GitHubPAT: !Ref GitHubPAT
            SendgridApiKey: !Ref SendgridApiKey
            MomentoApiKey: !Ref MomentoApiKey
            OpenAIApiKey: !Ref OpenAIApiKey

  SecretsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/secrets
      Type: String
      Value: !Ref Secrets
      Description: Arn for the Secrets Manager Secret for API Keys

  GitHubOwnerParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/github-owner
      Type: String
      Value: !Ref GitHubOwner
      Description: Owner of the Ready, Set, Cloud GitHub repository

  GitHubRepoParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/github-repo
      Type: String
      Value: !Ref GitHubRepo
      Description: Repository name of the Ready, Set, Cloud GitHub repository

  UpdateGitHubSourceCodeParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/update-github-source-code
      Type: String
      Value: !Ref UpdateGitHubSourceCode
      Description: Whether to update the GitHub source code automatically

  AdminEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/admin-email
      Type: String
      Value: !Ref AdminEmail
      Description: Email address of the Ready, Set, Cloud administrator

  AssetsBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/assets-bucket
      Type: String
      Value: !Ref BucketName
      Description: Name of the S3 bucket where static assets are stored

  AmplifyAppIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/amplify-app-id
      Type: String
      Value: !Ref AmplifyAppId
      Description: App identifier for the Ready, Set, Cloud Amplify app

  CacheNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /readysetcloud/cache-name
      Type: String
      Value: !Ref DefaultCacheName
      Description: Name of the Momento cache to use by default

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: RSCUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  FreeMembershipGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Free membership. Default group for new users
      GroupName: rsc-free
      UserPoolId: !Ref CognitoUserPool
      Precedence: 10

  ProMembershipGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Pro membership
      GroupName: rsc-pro
      UserPoolId: !Ref CognitoUserPool
      Precedence: 5

  AuthCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: DeployCustomDomainSupport
    Properties:
      DomainName: !Sub authenticate.${RootDomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub authenticate.${RootDomainName}
          HostedZoneId: !Ref HostedZoneId

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Condition: DeployCustomDomainSupport
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Sub authenticate.${RootDomainName}
      CustomDomainConfig:
        CertificateArn: !Ref AuthCertificate

  CustomDomainDnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: DeployCustomDomainSupport
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub authenticate.${RootDomainName}
      ResourceRecords:
        - !GetAtt CognitoUserPoolDomain.CloudFrontDistribution
      TTL: 300
      Type: CNAME

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: RSCUserPoolClient
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000
        - http://localhost:3000/oauth2/idpresponse
      LogoutURLs:
        - http://localhost:3000/logout
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: RSCIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Federated: 'cognito-identity.amazonaws.com'
          Action: 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated

  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
